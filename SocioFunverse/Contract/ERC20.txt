0x90f1D5fdACb1a3ce35AbE6F360A87CF34676a838

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol";

contract CoinExToken is ERC20 {

    uint256 public totalSupply_;
    IERC20  _token;
    address MainOwner;

    string constant yestsr = "sdh0";

   mapping(address=> uint256) public _LastPrizeTime;
   mapping(address=> uint256) _UserBalance;


    constructor(uint256 initialSupply) ERC20("CoinExToken", "CEG") {
        totalSupply_= initialSupply * 10 ** 18;
        _mint(address(this), totalSupply_);
        _token = IERC20(address(this));
        MainOwner = msg.sender;
        _UserBalance[address(this)] = totalSupply_;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return totalSupply_;
    }


    function dailyPrize() public {
        require(_LastPrizeTime[msg.sender] < block.timestamp, "Already Ownered for today");
        uint256 _give_= 1 * 10 ** 18;
        require(_give_ <= balanceOf(address(this)), "balance is low");
        _token.transfer(msg.sender, _give_);
        _LastPrizeTime[msg.sender] = block.timestamp + 1 days;// 86400;
        _UserBalance[address(this)] = _UserBalance[address(this)] - _give_;
        _UserBalance[msg.sender] = _UserBalance[msg.sender] + _give_;
    }

 
function withdrawErc20(address _another, uint256 _amount) public {
     require(MainOwner == msg.sender, "Not Owner");
      uint256 _give_= _amount * 10 ** 18;
     require(_token.transfer(msg.sender, _give_), "Transfer failed");
      _UserBalance[address(this)] = _UserBalance[address(this)] - _give_;
        _UserBalance[msg.sender] = _UserBalance[msg.sender] + _give_;
        _token.approve(_another, _amount);
}



      
    // Allow you to show how many tokens owns this smart contract
    function getSmartContractBalance() external view returns(uint) {
        return _token.balanceOf(address(this));
    }

     // Allow you to show how many tokens owns this user 
    function getuserBalance(address _account) public view returns(uint256) {
        uint256 Bal = _UserBalance[_account];
        return Bal;
    }

     function getuserTokeStatus(address _account) public view returns(bool) {
        if(_LastPrizeTime[_account] < block.timestamp)
        return true;
        else 
        return false;
    }
   
}
